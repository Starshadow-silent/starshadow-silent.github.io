<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>感觉不如shy宝的最后一摆</title>
      <link href="/2021/08/24/NOIP2022%E6%B8%B8%E5%AF%84/"/>
      <url>/2021/08/24/NOIP2022%E6%B8%B8%E5%AF%84/</url>
      
        <content type="html"><![CDATA[<p>写下这段文字时内心到底是怎样的心情呢？或许连我自己都不知道。</p><p>想了想从初一下半年来某校集训到现在，接触OI满打满算也有三年半了，感觉好像并没有学到啥东西啊呜呜呜。反倒是乱七八糟的膈膜打了不少，奇奇怪怪的朋友也结交了很多，但其实光是这样也足矣。</p><p>下面是游记部分——</p><h2 id="NOIP2022-退役游寄">NOIP2022 退役游寄</h2><h3 id="Day-inf">Day -inf</h3><p>刀，小骨，爬塔，地痞街区，暖雪，101</p><h3 id="Day-1">Day -1</h3><p>白天狂卷小骨2-3无伤过，发现没强度不行。</p><p>晚自修前和隆倩约饰物（凡）和福瑞控（伪煠）开刀，阿剑经典单人劣路卓尔，前中期摁着对面打，后期逆天站位五个人站一起推进给谜团跳刀R5个一伯次，然后就寄了。</p><p>给家长请假晚自修留机房一天，正准备看看海豹直播学技术然后爽爬塔，余光突然扫到——“阿汪想上浙大进入了直播间”。</p><p>我焯，原来你也…</p><h3 id="Day-0">Day 0</h3><p><img src="https://pic.imgdb.cn/item/638336c916f2c2beb1c65c01.jpg" alt="左手零食袋右手鸡蛋灌饼状态下制定的偷学计划"></p><p>最后一天了，早晨和消愁（峰）聊天时说想偷学一天看看板子，但是小骨一开就没后文了。</p><p>因为试图证明平衡系替换无敌流的强度，用冰河+死神打到初勇2阶段半血，SL了10次，最后还是没打过，留了个档以后有空再挑战吧。（虽然未来大概率没时间打膈膜了）</p><p>PS：力量要塞霸体流确实超模，抽象玩意儿。</p><p><img src="https://pic.imgdb.cn/item/638336c916f2c2beb1c65be6.jpg" alt="上路"></p><p><img src="https://pic.imgdb.cn/item/6382261816f2c2beb1354aed.jpg" alt="豆瓣9.8分大作——后排五人座"></p><p>下午直接润杭州，车上隆倩约饰物提出玩一个名字叫<a href="https://www.bilibili.com/read/cv11594835">《情书》</a>的桌游，并把规则书发在群里了。看了看感觉玩法很新奇，很有博弈的味道，直接进行一个加入。</p><p>下面是高燃混剪——</p><p>《导多了是吧》</p><ul><li>“猜你（shy），是6。”</li><li>“不是，下一个，cdy，到你了”</li><li>”我猜shy，是6“</li></ul><p>《人情世故》</p><ul><li>当cdy在手里有一张6的情况下摸上了8</li><li>“虽然我不可能赢但是我可以决定谁能赢。”</li><li>“我的选择是——和凡换卡！（此时凡还未赢一局）”</li><li>然后下一把凡在cdy明牌拿8，手中有1的情况下选择了猜福瑞控，他真的，我哭似。</li></ul><p>《什么叫兄妹情深啊》</p><ul><li>游戏中5号卡的身份是公主的哥哥，8号卡是公主，公主被弃置时算作失败，公主哥哥被弃置时要使一个人弃牌再摸牌，一回合必须摸牌一张弃牌一张。</li><li>cdy开了4防御，<s>不会成为效果的对象也不会被战斗破坏</s>，shy在手中有8的情况下摸上了5…只能选择弃置自己，好哥哥…</li></ul><p>有空再补</p><p><img src="https://pic.imgdb.cn/item/6382231716f2c2beb12e3c5c.jpg" alt="阴险的小鸟偷拍峰哥哥"></p><p>到了以后就是各种群魔乱舞。</p><p>开始时我一到酒店房间就迫不及待地电脑一拿直接打开wegame进行一个101的打，没人抢中直接永恩一拿奖励自己。</p><p>一开始可能因为快没电了只有40fps，和ppt没有本质区别。</p><p><img src="https://pic.imgdb.cn/item/6382231716f2c2beb12e3c61.jpg" alt="破损的面具，遇上早已蒙羞的剑🥵🥵🥵"></p><p>小搓一把之后受鸟要求开始csgo死斗，玩着玩着大伙就都来了，🐮意志第一共和国皇帝直接进行一个电竞室的册封</p><p>然后🐮让我接盘他的101手游，然后我就开始101手游了，🐮🐦和策直接三人gogo，进行一个满汉全席的吃。</p><p>凡众人开始打开电视找鲕粢嫄看，最后决定看你的名字。</p><p><img src="https://pic.imgdb.cn/item/638336c916f2c2beb1c65bfa.jpg" alt="峰の拍"></p><p>你的名字</p><p>你的名字</p><p>我焯，死去的回忆突然开始攻击我。</p><p>受不了了！为什么要让我想起夢燈籠这种东西！111</p><p><img src="https://pic.imgdb.cn/item/6382231716f2c2beb12e3c6e.jpg" alt="Nooooooooooooooo!"></p><p>然后这个时候因为外卖到了加上天气小热加上人多加上地方小加上空调不让开，🐮直接开始赤膊，我一看，全是南通，太爽辣！我直接也脱，床上一趴开始看鲕粢嫄</p><p><img src="https://pic.imgdb.cn/item/6382231716f2c2beb12e3c76.jpg" alt="这，就是银啪！"></p><p>小鸟酱没把牛的gogo状态——茄子皮肤拍进去真是太可惜了。</p><p>拍的图不是云上日光或者彗星不认可。</p><p>艹，彗星，突然想起了我的某逆天比喻，尬起来了。</p><p>吨吨吨，苦酒入喉心作痛</p><p><img src="https://pic.imgdb.cn/item/6382231716f2c2beb12e3c68.jpg" alt="不好喝，感觉不如青岛啤"></p><p>福瑞控可爱喵</p><p><img src="https://pic.imgdb.cn/item/6382261816f2c2beb1354ae0.jpg" alt="嘿嘿，有主的老板，嘿嘿"></p><p>小鸟睡了以后去休比房里又开了把101，玩的恶心。</p><p>本来不打算睡觉的，但是被<a href="https://space.bilibili.com/473129312">催眠</a>了，没办法。</p><p>剧情其实挺若智的，但up的声音真催眠啊，有丶好，比政治课还管用。</p><h3 id="Day-1-2">Day 1</h3><p>早饭好烂，又干又腻，感觉不如桔子水晶的粉条和大量高颜值小蛋糕。</p><p>进考场之前喷射了，羊肉串你罪大恶极！111</p><p>开局解压文件以后里面pdf还有密码，倒也正常。</p><p>离谱的是这个pdf只能在谷歌内核的浏览器中打开时可以被正常解密，逆天，time-=5min。</p><p>T1阅读理解了5min以后感觉好像没啥想法，直接去T2，发现第一个包一眼鸽巢原理空一个栈另外上下堆叠有重复随便消除，直接写，写完想了想后面的问题其实就是让你处理一个多出来的颜色种类，然后马上想到如果有颜色被消除完之前，所有颜色没有均出现过，显然可以用过第一个包的办法跑两次随便做，然后感觉自己T2要牛起了，直接开始长考。</p><p>然后就长考到了10:00…</p><p>很愤怒…</p><p>然后赶紧回去看T1，看了看样例才懂题目在说什么。然后发现直接按列遍历，按行找连续0的段然后前缀和算贡献随便做，然后就开写。</p><p>然后就调到了12:30…一堆+1,-1分不灵清，气断了。</p><p>各种东西弄完已经12:40了，才开始看T3，发现链的性质好像会做，但是暴力好像有15pts，链只有10pts，我赶紧狂冲暴力，然后挂了，直接寄。</p><p>反转了，其实我是文化课选手。</p><p>只能说旅游很开心，比赛就算了，出考场就看到一堆老哥破防了，构造题多少有点司马。</p><p>OI梦反正是从去年NOIP T2 dp 柿子推不出来那一刻开始就碎了的。</p><p>看别的老哥破防的时候自己内心也多少有点失落和遗憾吧。</p><p>摆烂总得付出点代价，但我更怕的是付出代价之后与收获失之交臂吧。</p><p>人生不如意，十之八九啊，唉。</p><p>但我觉得，学竞赛不学OI，就像玩游戏不玩原神，看舞见不看党妹，看杂谈不看lex，用手机不，四大名著不看红楼梦，说明这个人文学造诣和自我修养不足，他理解不了这种内在的阳春白雪的高雅艺术，他只能看到外表的辞藻堆砌，参不透其中深奥的精神内核，他整个人的层次就卡在这里了，只能度过一个相对失败的人生。</p><h3 id="下面是小彩蛋——">下面是小彩蛋——</h3><p>写这篇流水账+传图想素材想梗只用了我大概40分钟时间。</p><p>但是昨天写完上传的时候 hexo 寄了，github 登录框死活出不来</p><p>然后就开始百度找解决方法，找到现在终于解决了，只能说 CSDN 不懂装懂的老哥有点多浪费我的时间。</p><p>butterfly 主题好像有更新，想想反正退役了就摆了，将就看吧。</p><p>blog 是初三shy宝在鲕粢嫄魔怔人时代后期搭的，我的评价是鲕粢嫄是这样的。</p><p>在重搭 blog 的期间学会了 python 搭一个小型数据站，给平板小传点鲕粢嫄以便不时之需</p><p>大概就这样。</p><p>Written on 11.27</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF&amp;AT 复盘</title>
      <link href="/2021/08/24/Codeforces/"/>
      <url>/2021/08/24/Codeforces/</url>
      
        <content type="html"><![CDATA[<h2 id="Codeforces-Round-739-Div-3">Codeforces Round #739 (Div. 3)</h2><h4 id="A">A</h4><p>有一个数列，不存在可被 $3$ 整除或以十进制表示的数字 $3$ 结尾的整数，求数列中第 $k$ 个数。</p><p>暴力模拟就行了。</p><h4 id="B">B</h4><p>$2k$ 个人排成一个圈，编号依次为 $1,2,3,\cdots,2k$，每个人可以透过圆心看到对面的人。</p><p>如在下图中，$1$ 可以看到  $4$，$5$ 可以看到 $2$。</p><p><img src="https://pic.imgdb.cn/item/6124a7ca44eaada7391dd24e.jpg" alt=""></p><p>已知 $a$ 可以看到 $b$，问 $c$ 可以看到谁？若无解输出 $-1$。</p><p>$k=abs(a-b)$ 然后就会了。</p><h4 id="C">C</h4><p>Polycarp 找到了一个无限大的表格，他在表格中按某种顺序填了一些数字。</p><p>他把表格的左上角填上了 $1$，然后接下来的所有数字都按顺时针围绕着之前填的数字，如题图。</p><p>他的一个朋友想知道他自己最喜欢的数字 $k$ 填在了这个表格的哪一行哪一列。</p><p>乱做题。</p><p>稍微证明一下就可以知道第一列肯定都是完全平方数。考虑找一个 $i$，$(i-1)^2&lt;k\le i^2 $。然后暴力做一下就行了。找 $i$ 的过程可以二分优化一下说实话。</p><h4 id="D">D</h4><p>对于一个数 $a$，求在只能删去一位数字和在最右边加一位数字的情况下，最快操作几次可以写成 $2^k$ 的形式。</p><p>一开始对题意理解有点小问题，应该算是一道实现难度 $&gt;$ 思维难度的题吧。</p><p>先离线打一张 $2^x$ 的字符串表，因为加数字只能在最右边，那我们每次 <code>check</code> 一下从左往右，$n$ 里按序出现了多少个 $2^i$ 中存在的字符，然后算一下代价，取个最小值就好了。</p><h4 id="E">E</h4><p>泪目题，<a href="https://www.luogu.com.cn/blog/222747/cf1560e-ti-xie">My solution</a>。</p>]]></content>
      
      
      <categories>
          
          <category> OI笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>青春OIer不会梦到偷题怪同学</title>
      <link href="/2021/08/04/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
      <url>/2021/08/04/%E4%BA%8C%E5%88%86%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> OI笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>青春OIer不会梦到偷题怪同学</title>
      <link href="/2021/08/04/%E5%81%B7%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/08/04/%E5%81%B7%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="8-4">8.4</h2><ul><li><strong><a href="https://www.luogu.com.cn/problem/CF510C">CF510C</a></strong>：一眼秒杀拓扑排序，但是调了好久，主要问题在建边上面，<strong>以后建边尽量使用前向星吧</strong>。</li><li><strong><a href="https://www.luogu.com.cn/problem/CF566D">CF566D</a></strong>：显然要用并查集，但是如何快速在一个区间内做连续的合并操作是个问题，看了题解以后，发现并查集这种操作竟然还能拿个 $nt$ 数组优化，具体见奇技淫巧。</li><li><strong><a href="https://www.luogu.com.cn/problem/CF723C">CF723C</a></strong>：一眼秒杀贪心，有个教训就是用 <code>vector</code> 的时候一定要<strong>判断其长度是否大于 $0$ 要不然会 RE</strong>。</li></ul><h2 id="8-5">8.5</h2><ul><li><strong><a href="https://www.luogu.com.cn/problem/CF802A">CF802A</a></strong>：一开始觉得是每次丢掉后面出现次数最少的，调了有点久，然后发现想多了，丢一个后面出现最早的好像就行。</li></ul><h2 id="8-6">8.6</h2><ul><li><strong><a href="https://www.luogu.com.cn/problem/CF25D">CF25D</a></strong>：一眼秒杀并查集，然后拿个 <code>vector</code> 记一下答案，然后经典判长度，但这次判了qwq。</li><li><strong><a href="https://www.luogu.com.cn/problem/CF27C">CF27C</a></strong>：最短非有序序列显然要么没有，有的话长度一定为 $3$ ，且一定存在下标为 $1,x,x+1$ 的情况，然后你枚举一个 $i$ 就行了。</li><li><strong><a href="https://www.luogu.com.cn/problem/CF24C">CF24C</a></strong>：阴间破防题，但是思维难度pj-，我推的<a href="https://www.luogu.com.cn/record/55129299">柿子</a>超级长，而且还有 $m=n$ 的情况，反正码的有点久。</li></ul><p><img src="https://pic.imgdb.cn/item/6103a1ec5132923bf89ab087.png" alt="火猫三丈"></p><ul><li><strong><a href="https://www.luogu.com.cn/problem/CF935C">CF935C</a></strong>：平面几何题。</li></ul><h2 id="8-9">8.9</h2><ul><li><a href="https://www.luogu.com.cn/problem/P1525">P1525 关押罪犯</a>：用二分+二分图判断过了一遍。</li><li><a href="https://www.luogu.com.cn/problem/P3386">P3386 二分图最大匹配</a></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> OI笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请问今天要来点奇技淫巧吗</title>
      <link href="/2021/07/28/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
      <url>/2021/07/28/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="7-28">7.28</h2><ul><li>虚拟源点，可以用来处理一些既有点权又有边权的图论问题</li></ul><p>例题：<strong><a href="https://www.luogu.com.cn/problem/CF938D">CF938D</a></strong></p><p>题意就是让你去买票，每个城市都有不同价格的票，城市之间有道路，道路有过路费，问你以每个城市为起点，买一张票最少要花多少钱。</p><p>$1e5$​ 范围。</p><p>我们发现这题显然是最短路，但是有边权的情况下，每个点也有不同的权值，这就导致我们很难做。此时可以考虑建立<strong>虚拟源点</strong>。</p><p>我们运用假设性原则，假设有一个点，它连向了每一个城市，然后连接的边权为当前城市的票价，然后以这个点为源点跑一边最短路就彳亍了。</p><p>正确性可以自己手玩一下qwq。</p><h2 id="8-4">8.4</h2><ul><li>并查集连续合并的优化，思想是类似于 KMP 的数组+跳跃式合并</li></ul><p>例题：<strong><a href="https://www.luogu.com.cn/problem/CF566D">CF566D</a></strong></p><p>题目主要就是问你并查集怎么把 $x-y$ 的所有元素合并起来。</p><p>暴力，$5e5$ 过不得，然后这里要用一个类似于 KMP $next$ 数组的优化。</p><p>我们可以搞一个 $next$ 数组，用来存第 $i$ 个点之后，第一个和它不处于一个集合内的元素，然后动态更新 $next$ ，同时每次 $i=nt[i]$。</p><p>具体实现可以看代码，洛谷交了。</p>]]></content>
      
      
      <categories>
          
          <category> OI笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小生成树 Kruskal篇</title>
      <link href="/2021/01/28/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91--Kruskal%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86/"/>
      <url>/2021/01/28/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91--Kruskal%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是最小生成树？">什么是最小生成树？</h2><ul><li>在一个有$n$个点，$m$条边的无向连通图中，已知各边的权值，现在我们要删去一些边，保留一些边，使得图仍然保持连通，求保留边的边权之和的最小值</li></ul><h2 id="Kruskal算法">Kruskal算法</h2><h4 id="算法原理">算法原理</h4><p>​Kruskal算法的基本算法是<strong>贪心</strong>，即<strong>从小到大</strong>加入每一条边</p><h4 id="前置知识">前置知识</h4><p>​快速排序，结构体存图，<strong>并查集</strong></p><h4 id="实现思路-贪心正确性">实现思路&amp;贪心正确性</h4><p>​利用贪心的思想，将所有边根据边权从小到大排序，然后如果当前这条边所连接的两个结点不连通，就把这条边加进来，<strong>这样就可以保证，在使两个结点保持联通的过程中所增加的边的边权是最小的，QED</strong>。</p><h4 id="实现技巧">实现技巧</h4><p>​排序使用$sort$，判断结点是否联通以及加边用<strong>并查集</strong>实现</p><h2 id="Code">Code</h2><p>模板题，<a href="https://www.luogu.com.cn/problem/P3366">洛谷P3366</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e3</span>+<span class="number">10</span>,M=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> p[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y,c;</span><br><span class="line">&#125;a[M];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x!=p[x])</span><br><span class="line">&#123;</span><br><span class="line">p[x]=<span class="built_in">find</span>(p[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p[<span class="built_in">find</span>(i)]=<span class="built_in">find</span>(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge q,edge p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> q.c&lt;p.c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">p[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i].x&gt;&gt;a[i].y&gt;&gt;a[i].c;</span><br><span class="line"><span class="built_in">merge</span>(a[i].x,a[i].y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(i)!=<span class="built_in">find</span>(i+<span class="number">1</span>))</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;orz&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">p[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+m+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(a[i].x)!=<span class="built_in">find</span>(a[i].y))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">merge</span>(a[i].x,a[i].y);</span><br><span class="line">sum++;</span><br><span class="line">ans+=a[i].c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum==n<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="简单练习题">简单练习题</h2><p><a href="https://www.luogu.com.cn/problem/P1195">P1195 口袋的天空</a></p><p><a href="https://www.luogu.com.cn/problem/P2330">SCOI2005 繁忙的都市</a></p>]]></content>
      
      
      <categories>
          
          <category> OI笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kruskal </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
